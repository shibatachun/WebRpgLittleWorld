import type { INode } from "babylonjs-gltf2interface";
import { AccessorType, MeshPrimitiveMode } from "babylonjs-gltf2interface";
import type { FloatArray, DataArray, IndicesArray } from "@babylonjs/core/types.js";
import type { Vector4 } from "@babylonjs/core/Maths/math.vector.js";
import { Quaternion, Vector3 } from "@babylonjs/core/Maths/math.vector.js";
import { VertexBuffer } from "@babylonjs/core/Buffers/buffer.js";
import type { Node } from "@babylonjs/core/node.js";
export declare function GetAccessorElementCount(accessorType: AccessorType): number;
export declare function FloatsNeed16BitInteger(floatArray: FloatArray): boolean;
export declare function IsStandardVertexAttribute(type: string): boolean;
export declare function GetAccessorType(kind: string, hasVertexColorAlpha: boolean): AccessorType;
export declare function GetAttributeType(kind: string): string;
export declare function GetPrimitiveMode(fillMode: number): MeshPrimitiveMode;
export declare function IsTriangleFillMode(fillMode: number): boolean;
export declare function NormalizeTangent(tangent: Vector4 | Vector3): void;
export declare function ConvertToRightHandedPosition(value: Vector3): Vector3;
export declare function ConvertToRightHandedRotation(value: Quaternion): Quaternion;
export declare function ConvertToRightHandedNode(value: INode): void;
/**
 * Rotation by 180 as glTF has a different convention than Babylon.
 * @param rotation Target camera rotation.
 * @returns Ref to camera rotation.
 */
export declare function ConvertCameraRotationToGLTF(rotation: Quaternion): Quaternion;
export declare function RotateNode180Y(node: INode): void;
/**
 * Collapses GLTF parent and node into a single node. This is useful for removing nodes that were added by the GLTF importer.
 * @param node Target parent node.
 * @param parentNode Original GLTF node (Light or Camera).
 */
export declare function CollapseParentNode(node: INode, parentNode: INode): void;
/**
 * Sometimes the GLTF Importer can add extra transform nodes (for lights and cameras). This checks if a parent node was added by the GLTF Importer. If so, it should be removed during serialization.
 * @param babylonNode Original GLTF node (Light or Camera).
 * @param parentBabylonNode Target parent node.
 * @returns True if the parent node was added by the GLTF importer.
 */
export declare function IsParentAddedByImporter(babylonNode: Node, parentBabylonNode: Node): boolean;
export declare function IsNoopNode(node: Node, useRightHandedSystem: boolean): boolean;
/**
 * Converts an IndicesArray into either Uint32Array or Uint16Array, only copying if the data is number[].
 * @param indices input array to be converted
 * @param start starting index to copy from
 * @param count number of indices to copy
 * @returns a Uint32Array or Uint16Array
 * @internal
 */
export declare function IndicesArrayToTypedArray(indices: IndicesArray, start: number, count: number, is32Bits: boolean): Uint32Array | Uint16Array;
export declare function DataArrayToUint8Array(data: DataArray): Uint8Array;
export declare function GetMinMax(data: DataArray, vertexBuffer: VertexBuffer, start: number, count: number): {
    min: number[];
    max: number[];
};
/**
 * Removes, in-place, object properties which have the same value as the default value.
 * Useful for avoiding unnecessary properties in the glTF JSON.
 * @param object the object to omit default values from
 * @param defaultValues a partial object with default values
 * @returns object with default values omitted
 */
export declare function OmitDefaultValues<T extends Object>(object: T, defaultValues: Partial<T>): T;
